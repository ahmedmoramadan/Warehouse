// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseProject.Data;

#nullable disable

namespace WarehouseProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1ea49f11-5933-47c9-8f99-c31e80c80e00",
                            Name = "Warehouse_manager",
                            NormalizedName = "WAREHOUSE_MANAGER"
                        },
                        new
                        {
                            Id = "e9f87e27-9f6a-47ea-9e04-fdda5141666e",
                            Name = "Purchases_Manager",
                            NormalizedName = "PURCHASES_MANAGER"
                        },
                        new
                        {
                            Id = "a2be9f7e-c263-4be8-a4f2-c6c45acc0841",
                            Name = "Specification_Head",
                            NormalizedName = "SPECIFICATION_HEAD"
                        },
                        new
                        {
                            Id = "1fc81189-3e7f-4a2b-b3c8-fb3e80fdc6d0",
                            Name = "Technical_Head",
                            NormalizedName = "TECHNICAL_HEAD"
                        },
                        new
                        {
                            Id = "e14c35d2-8c04-40b8-b4a1-f75e694cbfc0",
                            Name = "Selection_Head",
                            NormalizedName = "SELECTION_HEAD"
                        },
                        new
                        {
                            Id = "220df9dd-d4dc-4a3f-a080-4e7e7816fa2c",
                            Name = "Recive_Head",
                            NormalizedName = "RECIVE_HEAD"
                        },
                        new
                        {
                            Id = "29b1feb4-f6e8-433f-bfbb-4be8f55b7f6a",
                            Name = "SpecificationTechnical_Head",
                            NormalizedName = "SPECIFICATIONTECHNICAL_HEAD"
                        },
                        new
                        {
                            Id = "4edfac9b-c3a8-4365-9fcb-3ff9b129b98e",
                            Name = "Expire_Head",
                            NormalizedName = "EXPIRE_HEAD"
                        },
                        new
                        {
                            Id = "d0c62d3a-3c8e-4b7c-8a61-80c1f16593ec",
                            Name = "Header",
                            NormalizedName = "HEADER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseProject.Models.AlternativeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequiredItemId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("RequiredItemId");

                    b.ToTable("AlternativeItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WarehouseProject.Models.CovenantItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("covenantItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Faculty of Engineering, Shoubra"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Faculty of Medicine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Faculty of Veterinary Medicine"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Faculty of Science"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Faculty of Agriculture"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Faculty of Commerce"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Faculty of Education"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Faculty of Law"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Faculty of Arts"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Faculty of Physical Education"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Faculty of Nursing"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Faculty of Specific Education"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Faculty of Computers and Artificial Intelligence"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Faculty of Applied Arts"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Faculty of Engineering, Benha"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Faculty of Al - Alsun(Languages)"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Faculty of Biotechnology"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Faculty of Physical Therap"
                        });
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpireCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpiritionProccesID")
                        .HasColumnType("int");

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpiritionProccesID")
                        .IsUnique();

                    b.ToTable("expireCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpireCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ExpireCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "ExpireCommitteeId");

                    b.HasIndex("ExpireCommitteeId");

                    b.ToTable("expireCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpiritionProcces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Createon")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("ExpiritionProcces");
                });

            modelBuilder.Entity("WarehouseProject.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ahmed Mohamed",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01142003939"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ahmed Shapaan",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01252003939"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ahmed Tamer",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01542213939"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Safwa Mohamed",
                            Password = "Safwa000@111",
                            PhoneNumber = "01142006739"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sohila Amr",
                            Password = "Sohila000@111",
                            PhoneNumber = "01142003955"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yasmine Abdelrhman",
                            Password = "Yasmine000@111",
                            PhoneNumber = "01142004439"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Zaid Adel",
                            Password = "Zaid000@111",
                            PhoneNumber = "01042223939"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Amal Sabry",
                            Password = "Amal000@111",
                            PhoneNumber = "01242003933"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dr Tarek Elsheshtawy",
                            Password = "Tarek000@111",
                            PhoneNumber = "01123458983"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Eng Amainy Saaed",
                            Password = "Amainy000@111",
                            PhoneNumber = "01242234939"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dr Fady",
                            Password = "Fady000@111",
                            PhoneNumber = "01542003939"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dr Mohamed Abdelfataah",
                            Password = "Mohamed000@111",
                            PhoneNumber = "01142003939"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Dr Karam",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01242002109"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Dr Ahmed Shalaby",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01240000039"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Dr Ahmed Taha",
                            Password = "Ahmed000@111",
                            PhoneNumber = "01011200121"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Mahmmud Ghonam",
                            PhoneNumber = "01241100023"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Rayan Ghonam",
                            PhoneNumber = "01242200067"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Yousef Hiatham",
                            PhoneNumber = "01244400000"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ahmed Hosny",
                            PhoneNumber = "01246700048"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Mohamed agami",
                            PhoneNumber = "01242400000"
                        },
                        new
                        {
                            Id = 21,
                            Name = "mahmoud roqa",
                            PhoneNumber = "01296700048"
                        });
                });

            modelBuilder.Entity("WarehouseProject.Models.Offer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateOnly>("CreateOn")
                        .HasColumnType("date");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("VendorId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReceivedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveproccesId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveproccesId");

                    b.ToTable("ReceivedItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.Receiveprocces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("ReceiveProcces");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReciveCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveproccesID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveproccesID")
                        .IsUnique();

                    b.ToTable("reciveCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReciveCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ReciveCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "ReciveCommitteeId");

                    b.HasIndex("ReciveCommitteeId");

                    b.ToTable("reciveCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.RequiredItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DATEName")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DATESAndP")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitialPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenderId");

                    b.ToTable("RequiredItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.RequiredItemOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredItemId")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "RequiredItemId");

                    b.HasIndex("RequiredItemId");

                    b.ToTable("RequiredItemOffers");
                });

            modelBuilder.Entity("WarehouseProject.Models.SelectionCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("SelectionCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.SelectionCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SelectionCommitteeId");

                    b.HasIndex("SelectionCommitteeId");

                    b.ToTable("SelectionCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("SpecifictionCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SpecifictionCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SpecifictionCommitteeId");

                    b.HasIndex("SpecifictionCommitteeId");

                    b.ToTable("SpecifictionCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionTechnicalCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveproccesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveproccesId")
                        .IsUnique();

                    b.ToTable("specifictionTechnicalCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionTechnicalCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SpecifictionTechnicalCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SpecifictionTechnicalCommitteeId");

                    b.HasIndex("SpecifictionTechnicalCommitteeId");

                    b.ToTable("specifictionTechnicalCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.TechnicalCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HeadID")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("TechnicalCommittees");
                });

            modelBuilder.Entity("WarehouseProject.Models.TechnicalCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "TechnicalCommitteeId");

                    b.HasIndex("TechnicalCommitteeId");

                    b.ToTable("TechnicalCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateFinitished")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("Finitished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("WarehouseProject.Models.Vendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "microsystem",
                            number = "01142003939"
                        },
                        new
                        {
                            id = 2,
                            Name = "Arab Business",
                            number = "01252003939"
                        },
                        new
                        {
                            id = 3,
                            Name = "PC Powerhouse",
                            number = "01542213939"
                        },
                        new
                        {
                            id = 4,
                            Name = "LaptopLand",
                            number = "01142006739"
                        },
                        new
                        {
                            id = 5,
                            Name = "Computers Partners",
                            number = "01142003955"
                        },
                        new
                        {
                            id = 6,
                            Name = "ElitePC Technologies",
                            number = "01142004439"
                        },
                        new
                        {
                            id = 7,
                            Name = "Circuit City Computers",
                            number = "01042223939"
                        },
                        new
                        {
                            id = 8,
                            Name = "ProPanel Partners",
                            number = "01242003939"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WarehouseProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WarehouseProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WarehouseProject.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseProject.Models.AlternativeItem", b =>
                {
                    b.HasOne("WarehouseProject.Models.Offer", "Offer")
                        .WithMany("alternativeItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.RequiredItem", "RequiredItem")
                        .WithMany("alternativeItems")
                        .HasForeignKey("RequiredItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("RequiredItem");
                });

            modelBuilder.Entity("WarehouseProject.Models.CovenantItem", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("CovenantItems")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpireCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.ExpiritionProcces", "Tender")
                        .WithOne("ExpireCommittee")
                        .HasForeignKey("WarehouseProject.Models.ExpireCommittee", "ExpiritionProccesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpireCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.ExpireCommittee", "ExpireCommittee")
                        .WithMany("Members")
                        .HasForeignKey("ExpireCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("expireCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpireCommittee");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("WarehouseProject.Models.Offer", b =>
                {
                    b.HasOne("WarehouseProject.Models.Vendor", "Vendor")
                        .WithMany("offers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReceivedItem", b =>
                {
                    b.HasOne("WarehouseProject.Models.Receiveprocces", "Receiveprocces")
                        .WithMany("ReceivedItems")
                        .HasForeignKey("ReceiveproccesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiveprocces");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReciveCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.Receiveprocces", "receiveprocces")
                        .WithOne("ReciveCommittee")
                        .HasForeignKey("WarehouseProject.Models.ReciveCommittee", "ReceiveproccesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("receiveprocces");
                });

            modelBuilder.Entity("WarehouseProject.Models.ReciveCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("reciveCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.ReciveCommittee", "ReciveCommittee")
                        .WithMany("Members")
                        .HasForeignKey("ReciveCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("ReciveCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.RequiredItem", b =>
                {
                    b.HasOne("WarehouseProject.Models.Tender", "Tender")
                        .WithMany("RequiredItems")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("WarehouseProject.Models.RequiredItemOffer", b =>
                {
                    b.HasOne("WarehouseProject.Models.Offer", "Offer")
                        .WithMany("RequiredItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.RequiredItem", "RequiredItem")
                        .WithMany("Offers")
                        .HasForeignKey("RequiredItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("RequiredItem");
                });

            modelBuilder.Entity("WarehouseProject.Models.SelectionCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.Tender", "Tender")
                        .WithOne("selectionCommittee")
                        .HasForeignKey("WarehouseProject.Models.SelectionCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("WarehouseProject.Models.SelectionCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("selectionCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.SelectionCommittee", "SelectionCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SelectionCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SelectionCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.Tender", "Tender")
                        .WithOne("SpecifictionCommittee")
                        .HasForeignKey("WarehouseProject.Models.SpecifictionCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("specifictionCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.SpecifictionCommittee", "SpecifictionCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SpecifictionCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SpecifictionCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionTechnicalCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.Receiveprocces", "Receiveprocces")
                        .WithOne("SpecifictionTechnicalCommittee")
                        .HasForeignKey("WarehouseProject.Models.SpecifictionTechnicalCommittee", "ReceiveproccesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiveprocces");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionTechnicalCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("specifictionTechnicalCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.SpecifictionTechnicalCommittee", "SpecifictionTechnicalCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SpecifictionTechnicalCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SpecifictionTechnicalCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.TechnicalCommittee", b =>
                {
                    b.HasOne("WarehouseProject.Models.Tender", "Tender")
                        .WithOne("TechnicalCommittee")
                        .HasForeignKey("WarehouseProject.Models.TechnicalCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("WarehouseProject.Models.TechnicalCommitteeMember", b =>
                {
                    b.HasOne("WarehouseProject.Models.Member", "Member")
                        .WithMany("technicalCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehouseProject.Models.TechnicalCommittee", "TechnicalCommittee")
                        .WithMany("Members")
                        .HasForeignKey("TechnicalCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("TechnicalCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.Tender", b =>
                {
                    b.HasOne("WarehouseProject.Models.Entity", "Entity")
                        .WithMany("tenders")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("WarehouseProject.Models.Entity", b =>
                {
                    b.Navigation("tenders");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpireCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.ExpiritionProcces", b =>
                {
                    b.Navigation("ExpireCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.Member", b =>
                {
                    b.Navigation("CovenantItems");

                    b.Navigation("expireCommitteeMembers");

                    b.Navigation("reciveCommitteeMembers");

                    b.Navigation("selectionCommitteeMembers");

                    b.Navigation("specifictionCommitteeMembers");

                    b.Navigation("specifictionTechnicalCommitteeMembers");

                    b.Navigation("technicalCommitteeMembers");
                });

            modelBuilder.Entity("WarehouseProject.Models.Offer", b =>
                {
                    b.Navigation("RequiredItems");

                    b.Navigation("alternativeItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.Receiveprocces", b =>
                {
                    b.Navigation("ReceivedItems");

                    b.Navigation("ReciveCommittee");

                    b.Navigation("SpecifictionTechnicalCommittee")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseProject.Models.ReciveCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.RequiredItem", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("alternativeItems");
                });

            modelBuilder.Entity("WarehouseProject.Models.SelectionCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.SpecifictionTechnicalCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.TechnicalCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("WarehouseProject.Models.Tender", b =>
                {
                    b.Navigation("RequiredItems");

                    b.Navigation("SpecifictionCommittee");

                    b.Navigation("TechnicalCommittee");

                    b.Navigation("selectionCommittee");
                });

            modelBuilder.Entity("WarehouseProject.Models.Vendor", b =>
                {
                    b.Navigation("offers");
                });
#pragma warning restore 612, 618
        }
    }
}
